pipeline {

    environment {
     GITHUB_URL='github.com/kevinmenotyou/devops_project2'
    }
  
    agent {
        node {
            label 'test-jenkins-agent1'
        }
    }

    options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '16', 
                    numToKeepStr: '10'
            )
    }

    stages {
	    stage ('Ensure Terraform Infrastructure is Spawned') {
		    environment {
				REGISTRY_RUNNING = docker container inspect -f {{.State.Running}} LocalDockerRegistry
			}
		    steps {
			    sh """
				    cd terraform
					terraform init
					terraform validate
					echo "State of local registry running was set to: env.REGISTRY_RUNNING"
					terraform apply -input=false -auto-approve --var "local_registry_spawned=env.REGISTRY_RUNNING"
				"""
			}
		}
		
        stage('Diagram') {
			when {
				allOf {
					changeset "diagram/*"
				}
			}
			steps {
				withCredentials([usernamePassword(credentialsId: '167b833a-9420-453a-a1a3-4633984c9443', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
					echo 'Building Diagram..'
					sh """ 
						git config --global user.email "fake@fakeemail.com"
						git config --global user.name "SVC_ROBOTUSER"
						pip3 install diagrams
						python3 diagram/diagram.py
						mv diagram/overview_diagram docker/html/overview_diagram
						git add docker/html/overview_diagram.png
						git commit -m '[robot] Submit updated diagram from build machine'
						git push https://$USERNAME:$PASSWORD@$GITHUB_URL HEAD:$BRANCH_NAME
					"""
				}
			}
        }
		stage('Docker Image') {
			when {
				allOf {
					changeset "docker/**"
				}
			}
			steps {
				echo 'Building Docker..'
				sh """
				  echo Building Docker Image
				  docker pull nginx
				  docker build -t devops-project-diagram ./docker
				  echo Pushing to Local Repository: localhost:5000
				  docker image tag devops-diagram:latest localhost:5000/svc_azureuser/devops-diagram:latest
				  docker image push localhost:5000/svc_azureuser/devops-diagram:latest
				  
				  //echo Refreshing Terraform Docker Infrastructure
				  //cd terraform
			      //terraform init
				  //terraform validate
				  //terraform apply -input=false -auto-approve
				"""
			}
        }
    }
}